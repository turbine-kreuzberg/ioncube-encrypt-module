---
- hosts: localhost
  remote_user: root

  vars:
    #distribution: centos
    #version: 7
    #init: /usr/lib/systemd/systemd
    #run_opts: "--privileged --volume='/sys/fs/cgroup:/sys/fs/cgroup:ro'"
    #playbook: test.yml
    #container_id:
    #  stdout: "255f46f0abea533a1d6e4b9d15c946766eddf633119a801941ab1e1daba44c3a"
    distribution: ubuntu
    version: 14.04
    init: /sbin/init
    run_opts: "--privileged=true"
    playbook: test.yml

  #services:
  #  - docker

  pre_tasks:

    # Create ansible.cfg with correct roles_path
    - shell: printf '[defaults]\nroles_path=../ \ncallback_plugins=tests/callbacks' >ansible.cfg
    ## Pull container
    - name: pull container
      command: sudo docker pull "{{distribution}}":"{{version}}"
    ## Customize container
    - name: build container
      command: sudo docker build --rm=true --file=tests/Dockerfile."{{distribution}}"-"{{version}}" --tag="{{distribution}}"-"{{version}}":ansible tests

    # Run container in detached state
    - name: run container
      command: sudo docker run "{{run_opts}}" --detach --volume=/home/ray/PhpstormProjects/ioncube-encrypt-module:/etc/ansible/roles/role_under_test:rw "{{distribution}}"-"{{version}}":ansible "{{init}}"
      register: container_id

    - debug:
        var: container_id
    ## Ansible syntax check.
    - command: "sudo docker exec --tty {{container_id.stdout}} env TERM=xterm ansible-playbook /etc/ansible/roles/role_under_test/tests/{{playbook}} --syntax-check"
      ignore_errors: yes

    - name: run playbook
      command: "sudo docker exec --tty {{container_id.stdout}} env TERM=xterm ansible-playbook /etc/ansible/roles/role_under_test/tests/{{playbook}}"
      ignore_errors: yes

    - name: run playbook second time
      command: "sudo docker exec --tty {{container_id.stdout}} env TERM=xterm ansible-playbook /etc/ansible/roles/role_under_test/tests/{{playbook}}"
      ignore_errors: yes

    - name: access to container
      command: printf "sudo docker exec -i -t {{container_id.stdout}} bash"

    - name: stop container {{container_id.stdout}}
      command: sudo docker stop {{container_id.stdout}}

    - name: rm container {{container_id.stdout}}
      command: sudo docker rm {{container_id.stdout}}
